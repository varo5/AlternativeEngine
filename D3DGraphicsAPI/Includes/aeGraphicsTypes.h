#pragma once
#include <aePrerequisitesUtil.h>

namespace aeEngineSDK
{
	typedef enum AEG_FORMAT
	{
		AEG_FORMAT_UNKNOWN = 0,
		AEG_FORMAT_R32G32B32A32_TYPELESS = 1,
		AEG_FORMAT_R32G32B32A32_FLOAT = 2,
		AEG_FORMAT_R32G32B32A32_UINT = 3,
		AEG_FORMAT_R32G32B32A32_SINT = 4,
		AEG_FORMAT_R32G32B32_TYPELESS = 5,
		AEG_FORMAT_R32G32B32_FLOAT = 6,
		AEG_FORMAT_R32G32B32_UINT = 7,
		AEG_FORMAT_R32G32B32_SINT = 8,
		AEG_FORMAT_R16G16B16A16_TYPELESS = 9,
		AEG_FORMAT_R16G16B16A16_FLOAT = 10,
		AEG_FORMAT_R16G16B16A16_UNORM = 11,
		AEG_FORMAT_R16G16B16A16_UINT = 12,
		AEG_FORMAT_R16G16B16A16_SNORM = 13,
		AEG_FORMAT_R16G16B16A16_SINT = 14,
		AEG_FORMAT_R32G32_TYPELESS = 15,
		AEG_FORMAT_R32G32_FLOAT = 16,
		AEG_FORMAT_R32G32_UINT = 17,
		AEG_FORMAT_R32G32_SINT = 18,
		AEG_FORMAT_R32G8X24_TYPELESS = 19,
		AEG_FORMAT_D32_FLOAT_S8X24_UINT = 20,
		AEG_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
		AEG_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
		AEG_FORMAT_R10G10B10A2_TYPELESS = 23,
		AEG_FORMAT_R10G10B10A2_UNORM = 24,
		AEG_FORMAT_R10G10B10A2_UINT = 25,
		AEG_FORMAT_R11G11B10_FLOAT = 26,
		AEG_FORMAT_R8G8B8A8_TYPELESS = 27,
		AEG_FORMAT_R8G8B8A8_UNORM = 28,
		AEG_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
		AEG_FORMAT_R8G8B8A8_UINT = 30,
		AEG_FORMAT_R8G8B8A8_SNORM = 31,
		AEG_FORMAT_R8G8B8A8_SINT = 32,
		AEG_FORMAT_R16G16_TYPELESS = 33,
		AEG_FORMAT_R16G16_FLOAT = 34,
		AEG_FORMAT_R16G16_UNORM = 35,
		AEG_FORMAT_R16G16_UINT = 36,
		AEG_FORMAT_R16G16_SNORM = 37,
		AEG_FORMAT_R16G16_SINT = 38,
		AEG_FORMAT_R32_TYPELESS = 39,
		AEG_FORMAT_D32_FLOAT = 40,
		AEG_FORMAT_R32_FLOAT = 41,
		AEG_FORMAT_R32_UINT = 42,
		AEG_FORMAT_R32_SINT = 43,
		AEG_FORMAT_R24G8_TYPELESS = 44,
		AEG_FORMAT_D24_UNORM_S8_UINT = 45,
		AEG_FORMAT_R24_UNORM_X8_TYPELESS = 46,
		AEG_FORMAT_X24_TYPELESS_G8_UINT = 47,
		AEG_FORMAT_R8G8_TYPELESS = 48,
		AEG_FORMAT_R8G8_UNORM = 49,
		AEG_FORMAT_R8G8_UINT = 50,
		AEG_FORMAT_R8G8_SNORM = 51,
		AEG_FORMAT_R8G8_SINT = 52,
		AEG_FORMAT_R16_TYPELESS = 53,
		AEG_FORMAT_R16_FLOAT = 54,
		AEG_FORMAT_D16_UNORM = 55,
		AEG_FORMAT_R16_UNORM = 56,
		AEG_FORMAT_R16_UINT = 57,
		AEG_FORMAT_R16_SNORM = 58,
		AEG_FORMAT_R16_SINT = 59,
		AEG_FORMAT_R8_TYPELESS = 60,
		AEG_FORMAT_R8_UNORM = 61,
		AEG_FORMAT_R8_UINT = 62,
		AEG_FORMAT_R8_SNORM = 63,
		AEG_FORMAT_R8_SINT = 64,
		AEG_FORMAT_A8_UNORM = 65,
		AEG_FORMAT_R1_UNORM = 66,
		AEG_FORMAT_R9G9B9E5_SHAREDEXP = 67,
		AEG_FORMAT_R8G8_B8G8_UNORM = 68,
		AEG_FORMAT_G8R8_G8B8_UNORM = 69,
		AEG_FORMAT_BC1_TYPELESS = 70,
		AEG_FORMAT_BC1_UNORM = 71,
		AEG_FORMAT_BC1_UNORM_SRGB = 72,
		AEG_FORMAT_BC2_TYPELESS = 73,
		AEG_FORMAT_BC2_UNORM = 74,
		AEG_FORMAT_BC2_UNORM_SRGB = 75,
		AEG_FORMAT_BC3_TYPELESS = 76,
		AEG_FORMAT_BC3_UNORM = 77,
		AEG_FORMAT_BC3_UNORM_SRGB = 78,
		AEG_FORMAT_BC4_TYPELESS = 79,
		AEG_FORMAT_BC4_UNORM = 80,
		AEG_FORMAT_BC4_SNORM = 81,
		AEG_FORMAT_BC5_TYPELESS = 82,
		AEG_FORMAT_BC5_UNORM = 83,
		AEG_FORMAT_BC5_SNORM = 84,
		AEG_FORMAT_B5G6R5_UNORM = 85,
		AEG_FORMAT_B5G5R5A1_UNORM = 86,
		AEG_FORMAT_B8G8R8A8_UNORM = 87,
		AEG_FORMAT_B8G8R8X8_UNORM = 88,
		AEG_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
		AEG_FORMAT_B8G8R8A8_TYPELESS = 90,
		AEG_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
		AEG_FORMAT_B8G8R8X8_TYPELESS = 92,
		AEG_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
		AEG_FORMAT_BC6H_TYPELESS = 94,
		AEG_FORMAT_BC6H_UF16 = 95,
		AEG_FORMAT_BC6H_SF16 = 96,
		AEG_FORMAT_BC7_TYPELESS = 97,
		AEG_FORMAT_BC7_UNORM = 98,
		AEG_FORMAT_BC7_UNORM_SRGB = 99,
		AEG_FORMAT_AYUV = 100,
		AEG_FORMAT_Y410 = 101,
		AEG_FORMAT_Y416 = 102,
		AEG_FORMAT_NV12 = 103,
		AEG_FORMAT_P010 = 104,
		AEG_FORMAT_P016 = 105,
		AEG_FORMAT_420_OPAQUE = 106,
		AEG_FORMAT_YUY2 = 107,
		AEG_FORMAT_Y210 = 108,
		AEG_FORMAT_Y216 = 109,
		AEG_FORMAT_NV11 = 110,
		AEG_FORMAT_AI44 = 111,
		AEG_FORMAT_IA44 = 112,
		AEG_FORMAT_P8 = 113,
		AEG_FORMAT_A8P8 = 114,
		AEG_FORMAT_B4G4R4A4_UNORM = 115,
		AEG_FORMAT_FORCE_UINT = 0xffffffff
	} AEG_FORMAT;

	typedef enum AEG_MODE_SCANLINE_ORDER
	{
		AEG_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
		AEG_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
		AEG_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
		AEG_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
	} AEG_MODE_SCANLINE_ORDER;

	typedef enum AEG_MODE_SCALING
	{
		AEG_MODE_SCALING_UNSPECIFIED = 0,
		AEG_MODE_SCALING_CENTERED = 1,
		AEG_MODE_SCALING_STRETCHED = 2
	} AEG_MODE_SCALING;

	typedef enum AEG_MODE_ROTATION
	{
		AEG_MODE_ROTATION_UNSPECIFIED = 0,
		AEG_MODE_ROTATION_IDENTITY = 1,
		AEG_MODE_ROTATION_ROTATE90 = 2,
		AEG_MODE_ROTATION_ROTATE180 = 3,
		AEG_MODE_ROTATION_ROTATE270 = 4
	} AEG_MODE_ROTATION;

	typedef enum AEG_SWAP_EFFECT
	{
		AEG_SWAP_EFFECT_DISCARD = 0,
		AEG_SWAP_EFFECT_SEQUENTIAL = 1,
		AEG_SWAP_EFFECT_FLIP_SEQUENTIAL = 3
	} 	AEG_SWAP_EFFECT;

	typedef enum AEG_BIND_FLAG
	{
		AEG_BIND_VERTEX_BUFFER = 0x1L,
		AEG_BIND_INDEX_BUFFER = 0x2L,
		AEG_BIND_CONSTANT_BUFFER = 0x4L,
		AEG_BIND_SHADER_RESOURCE = 0x8L,
		AEG_BIND_STREAM_OUTPUT = 0x10L,
		AEG_BIND_RENDER_TARGET = 0x20L,
		AEG_BIND_DEPTH_STENCIL = 0x40L,
		AEG_BIND_UNORDERED_ACCESS = 0x80L,
		AEG_BIND_DECODER = 0x200L,
		AEG_BIND_VIDEO_ENCODER = 0x400L
	} 	AEG_BIND_FLAG;

	typedef enum AEG_CPU_ACCESS
	{
		AEG_CPU_ACCESS_NONE = (0),
		AEG_CPU_ACCESS_DYNAMIC = (1),
		AEG_CPU_ACCESS_READ_WRITE = (2),
		AEG_CPU_ACCESS_SCRATCH = (3),
		AEG_CPU_ACCESS_FIELD = 15
	} AEG_CPU_ACCESS;

	typedef enum AEG_CPU_ACCESS_FLAG
	{
		AEG_CPU_ACCESS_WRITE = 0x10000L,
		AEG_CPU_ACCESS_READ = 0x20000L
	} 	AEG_CPU_ACCESS_FLAG;

	typedef enum AEG_USAGE : uint32
	{
		AEG_USAGE_SHADER_INPUT = (1L << (0 + 4)),
		AEG_USAGE_RENDER_TARGET_OUTPUT = (1L << (1 + 4)),
		AEG_USAGE_BACK_BUFFER = (1L << (2 + 4)),
		AEG_USAGE_SHARED = (1L << (3 + 4)),
		AEG_USAGE_READ_ONLY = (1L << (4 + 4)),
		AEG_USAGE_DISCARD_ON_PRESENT = (1L << (5 + 4)),
		AEG_USAGE_UNORDERED_ACCESS = (1L << (6 + 4)),
		AEG_USAGE_DEFAULT = 0,
		AEG_USAGE_IMMUTABLE = 1,
		AEG_USAGE_DYNAMIC = 2,
		AEG_USAGE_STAGING = 3
	} 	AEG_USAGE;

	typedef enum AEG_COMPILE : uint32
	{
		AEG_COMPILE_DEBUG = (1 << 0),
		AEG_COMPILE_SKIP_VALIDATION=(1 << 1),
		AEG_COMPILE_SKIP_OPTIMIZATION=(1 << 2),
		AEG_COMPILE_PACK_MATRIX_ROW_MAJOR=(1 << 3),
		AEG_COMPILE_PACK_MATRIX_COLUMN_MAJOR=(1 << 4),
		AEG_COMPILE_PARTIAL_PRECISION=(1 << 5),
		AEG_COMPILE_FORCE_VS_SOFTWARE_NO_OPT=(1 << 6),
		AEG_COMPILE_FORCE_PS_SOFTWARE_NO_OPT=(1 << 7),
		AEG_COMPILE_NO_PRESHADER=(1 << 8),
		AEG_COMPILE_AVOID_FLOW_CONTROL=(1 << 9),
		AEG_COMPILE_PREFER_FLOW_CONTROL=(1 << 10),
		AEG_COMPILE_ENABLE_STRICTNESS=(1 << 11),
		AEG_COMPILE_ENABLE_BACKWARDS_COMPATIBILITY=(1 << 12),
		AEG_COMPILE_IEEE_STRICTNESS=(1 << 13),
		AEG_COMPILE_OPTIMIZATION_LEVEL0=(1 << 14),
		AEG_COMPILE_OPTIMIZATION_LEVEL1 =           0,
		AEG_COMPILE_OPTIMIZATION_LEVEL2=((1 << 14) | (1 << 15)),
		AEG_COMPILE_OPTIMIZATION_LEVEL3=(1 << 15),
		AEG_COMPILE_RESERVED16=(1 << 16),
		AEG_COMPILE_RESERVED17=(1 << 17),
		AEG_COMPILE_WARNINGS_ARE_ERRORS=(1 << 18),
		AEG_COMPILE_RESOURCES_MAY_ALIAS=(1 << 19),
	}AEG_COMPILE;

	typedef enum AEG_DRIVER_TYPE
	{
		AEG_DRIVER_TYPE_UNKNOWN = 0,
		AEG_DRIVER_TYPE_HARDWARE = (AEG_DRIVER_TYPE_UNKNOWN + 1),
		AEG_DRIVER_TYPE_REFERENCE = (AEG_DRIVER_TYPE_HARDWARE + 1),
		AEG_DRIVER_TYPE_NULL = (AEG_DRIVER_TYPE_REFERENCE + 1),
		AEG_DRIVER_TYPE_SOFTWARE = (AEG_DRIVER_TYPE_NULL + 1),
		AEG_DRIVER_TYPE_WARP = (AEG_DRIVER_TYPE_SOFTWARE + 1)
	} 	AEG_DRIVER_TYPE;

	typedef enum AEG_INPUT_CLASSIFICATION
	{
		AEG_INPUT_PER_VERTEX_DATA = 0,
		AEG_INPUT_PER_INSTANCE_DATA = 1
	} 	AEG_INPUT_CLASSIFICATION;

	typedef	enum AEG_PRIMITIVE_TOPOLOGY
	{
		AEG_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		AEG_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		AEG_PRIMITIVE_TOPOLOGY_LINELIST = 2,
		AEG_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		AEG_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		AEG_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		AEG_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		AEG_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		AEG_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		AEG_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		AEG_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
		AEG_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
		AEG_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
		AEG_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
		AEG_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
		AEG_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
		AEG_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
		AEG_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
		AEG_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
		AEG_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
		AEG_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
		AEG_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
		AEG_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
		AEG_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
		AEG_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
		AEG_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
		AEG_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
		AEG_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
		AEG_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
		AEG_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
		AEG_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
		AEG_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
		AEG_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
		AEG_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
		AEG_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
		AEG_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
		AEG_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
		AEG_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
		AEG_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
		AEG_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
		AEG_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
		AEG_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
	} 	AEG_PRIMITIVE_TOPOLOGY;

	typedef struct AEG_RATIONAL
	{
		uint32 Numerator;
		uint32 Denominator;
	} AEG_RATIONAL;

	typedef struct AEG_SAMPLE_DESC
	{
		uint32 Count;
		uint32 Quality;
	} AEG_SAMPLE_DESC;

	struct AEG_MODE_DESC
	{
		uint32 Width;
		uint32 Height;
		AEG_RATIONAL RefreshRate;
		AEG_FORMAT Format;
		AEG_MODE_SCANLINE_ORDER ScanlineOrdering;
		AEG_MODE_SCALING Scaling;
	};

	typedef struct AEG_SWAP_CHAIN_DESC
	{
		AEG_MODE_DESC BufferDesc;
		AEG_SAMPLE_DESC SampleDesc;
		uint32 BufferUsage;
		uint32 BufferCount;
		SIZE_T OutputWindow;
		uint32 Windowed;
		AEG_SWAP_EFFECT SwapEffect;
		uint32 Flags;
	} 	AEG_SWAP_CHAIN_DESC;

	typedef struct AEG_VIEWPORT
	{
		float TopLeftX;
		float TopLeftY;
		float Width;
		float Height;
		float MinDepth;
		float MaxDepth;
	} 	AEG_VIEWPORT;

	typedef struct AEG_TEXTURE2D_DESC
	{
		uint32 Width;
		uint32 Height;
		uint32 MipLevels;
		uint32 ArraySize;
		AEG_FORMAT Format;
		AEG_SAMPLE_DESC SampleDesc;
		uint32 Usage;
		uint32 BindFlags;
		uint32 CPUAccessFlags;
		uint32 MiscFlags;
	} 	AEG_TEXTURE2D_DESC;

	typedef struct AEG_BUFFER_DESC
	{
		uint32 ByteWidth;
		uint32 Usage;
		uint32 BindFlags;
		uint32 CPUAccessFlags;
		uint32 MiscFlags;
		uint32 StructureByteStride;
	} 	AEG_BUFFER_DESC;

	typedef struct AEG_SUBRESOURCE_DATA
	{
		const void *pSysMem;
		uint32 SysMemPitch;
		uint32 SysMemSlicePitch;
	} 	AEG_SUBRESOURCE_DATA;

	typedef struct AEG_SHADER_MACRO
	{
		const ANSICHAR* Name;
		const ANSICHAR* Definition;
	} 	AEG_SHADER_MACRO;

	typedef struct AEG_COMPILE_SHADER_DESC
	{
		wString FileName;
		AEG_SHADER_MACRO* ShaderMacro;
		String EntryPoint;
		String Profile;
		uint32 CompileOptimazation;
		uint32 Flags;
	} 	AEG_COMPILE_SHADER_DESC;

	typedef struct AEG_INPUT_ELEMENT_DESC
	{
		const ANSICHAR* SemanticName;
		uint32 SemanticIndex;
		AEG_FORMAT Format;
		uint32 InputSlot;
		uint32 AlignedByteOffset;
		AEG_INPUT_CLASSIFICATION InputSlotClass;
		uint32 InstanceDataStepRate;
	} 	AEG_INPUT_ELEMENT_DESC;

	typedef struct AEG_VERTEX_BUFFER_DESC
	{
		AEG_PRIMITIVE_TOPOLOGY Topology;
		uint32 StartSlot;
		uint32 IndexSize;
		uint32 VertexSize;
		uint32 NumBuffers;
	} 	AEG_VERTEX_BUFFER_DESC;

	#define	AEG_APPEND_ALIGNED_ELEMENT	( 0xffffffff )
}